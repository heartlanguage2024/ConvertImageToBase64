name: Potato Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        dotnet-version: [8.0]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build the project
        run: dotnet build --configuration Release

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Set up Git credentials
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Fetch and checkout production branch
        run: |
          git fetch origin
          git checkout production

      - name: Merge main into production
        run: |
          git pull origin production

      - name: Push changes to production
        run: |
          git push origin production
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ✅ Install ngrok using Chocolatey
      - name: Install ngrok
        run: |
          # Ensure Chocolatey is installed (for fresh runners)
          Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # Install ngrok using Chocolatey
          choco install ngrok -y

      # ✅ Authenticate ngrok with the authtoken
      - name: Authenticate ngrok
        run: |
          ngrok authtoken ${{ secrets.NGROK_AUTHTOKEN }}

      # ✅ Start ngrok and get URL
      - name: Start ngrok and get URL
        run: |
          # Start ngrok to tunnel port 8080
          Start-Process -NoNewWindow -FilePath "ngrok.exe" -ArgumentList "http", "8080"
          
          # Wait for ngrok to establish the tunnel
          Start-Sleep -Seconds 5

          # Get the public ngrok URL from the local ngrok API
          $ngrokUrl = (Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels").tunnels[0].public_url
          Write-Output "ngrok URL: $ngrokUrl"
          echo "NGROK_URL=$ngrokUrl" >> $GITHUB_ENV

      # ✅ Trigger Jenkins Job
      - name: Trigger Jenkins Job
        run: |
          $username = 'potato'
          $api_token = '110db95f19398729f40245888ff5f4c220'
          
          # Combine username and API token, and then base64 encode them
          $credentials = "${username}:${api_token}"
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credentials))
          
          # Use the dynamically retrieved ngrok URL to trigger the Jenkins job
          $jenkinsUrl = "${{ secrets.NGROK_URL }}"
          Invoke-WebRequest -Uri "$jenkinsUrl/job/potato/build" -Method Post -Headers @{
              "Authorization" = "Basic $base64AuthInfo"
          }
        shell: pwsh
